#!/usr/bin/env tsx

/**
 * Check that proper attribution is included throughout the project
 */

import { readFileSync, readdirSync, statSync } from 'fs'
import { join, extname } from 'path'

interface AttributionCheck {
  file: string
  hasAttribution: boolean
  missingElements: string[]
  suggestions: string[]
}

interface AttributionRequirement {
  pattern: RegExp
  description: string
  required: boolean
}

const ATTRIBUTION_REQUIREMENTS: AttributionRequirement[] = [
  {
    pattern: /n8n/i,
    description: 'n8n reference',
    required: true
  },
  {
    pattern: /(apache|license)/i,
    description: 'License reference',
    required: true
  },
  {
    pattern: /(copyright|©)/i,
    description: 'Copyright notice',
    required: false
  }
]

const GENERATED_CODE_HEADER = `/**
 * Generated by n8n Workflow Converter
 * 
 * This code uses n8n packages under the Apache License 2.0
 * Original n8n project: https://github.com/n8n-io/n8n
 * 
 * @license Apache-2.0 (for n8n components)
 * @license MIT (for generated code structure)
 */`

const README_ATTRIBUTION = `## Attribution

This project was generated using the n8n Workflow Converter, which leverages
official n8n packages for workflow execution. 

### n8n Attribution
- **n8n**: Workflow automation platform
- **License**: Apache License 2.0
- **Copyright**: n8n GmbH
- **Website**: https://n8n.io/
- **Repository**: https://github.com/n8n-io/n8n

Special thanks to the n8n team for creating an excellent automation platform
and making their packages available under open source licenses.`

async function checkAttribution() {
  console.log('🔍 Checking attribution compliance...')

  const results: AttributionCheck[] = []
  
  // Check key files
  const keyFiles = [
    'README.md',
    'LICENSE',
    'package.json',
    'docs/LICENSE-ATTRIBUTION.md',
    'THIRD-PARTY-LICENSES.md'
  ]

  for (const file of keyFiles) {
    const filePath = join(process.cwd(), file)
    try {
      const result = checkFileAttribution(filePath, file)
      results.push(result)
    } catch (error) {
      results.push({
        file,
        hasAttribution: false,
        missingElements: ['File not found'],
        suggestions: [`Create ${file} with proper attribution`]
      })
    }
  }

  // Check generated code templates
  const templateDirs = [
    'src/lib/code-generation',
    'supabase/functions/_shared'
  ]

  for (const dir of templateDirs) {
    const dirPath = join(process.cwd(), dir)
    try {
      const templateResults = checkDirectoryAttribution(dirPath)
      results.push(...templateResults)
    } catch (error) {
      console.warn(`⚠️  Could not check directory: ${dir}`)
    }
  }

  // Generate report
  generateAttributionReport(results)
}

function checkFileAttribution(filePath: string, fileName: string): AttributionCheck {
  const content = readFileSync(filePath, 'utf8')
  const missingElements: string[] = []
  const suggestions: string[] = []

  // Check based on file type
  if (fileName === 'README.md') {
    return checkReadmeAttribution(content, fileName)
  } else if (fileName === 'LICENSE') {
    return checkLicenseAttribution(content, fileName)
  } else if (fileName === 'package.json') {
    return checkPackageJsonAttribution(content, fileName)
  } else if (fileName.endsWith('.md')) {
    return checkMarkdownAttribution(content, fileName)
  } else if (fileName.endsWith('.ts') || fileName.endsWith('.js')) {
    return checkCodeAttribution(content, fileName)
  }

  // Generic check
  for (const req of ATTRIBUTION_REQUIREMENTS) {
    if (req.required && !req.pattern.test(content)) {
      missingElements.push(req.description)
    }
  }

  return {
    file: fileName,
    hasAttribution: missingElements.length === 0,
    missingElements,
    suggestions
  }
}

function checkReadmeAttribution(content: string, fileName: string): AttributionCheck {
  const missingElements: string[] = []
  const suggestions: string[] = []

  // Check for n8n attribution section
  if (!content.includes('## Attribution') && !content.includes('## 🙏 Attribution')) {
    missingElements.push('Attribution section')
    suggestions.push('Add attribution section with n8n credits')
  }

  // Check for n8n mention
  if (!content.toLowerCase().includes('n8n')) {
    missingElements.push('n8n reference')
    suggestions.push('Add reference to n8n platform')
  }

  // Check for license mention
  if (!content.toLowerCase().includes('license')) {
    missingElements.push('License information')
    suggestions.push('Add license information section')
  }

  // Check for specific n8n attribution text
  if (!content.includes('n8n.io') && !content.includes('github.com/n8n-io/n8n')) {
    missingElements.push('n8n links')
    suggestions.push('Add links to n8n website and repository')
  }

  return {
    file: fileName,
    hasAttribution: missingElements.length === 0,
    missingElements,
    suggestions
  }
}

function checkLicenseAttribution(content: string, fileName: string): AttributionCheck {
  const missingElements: string[] = []
  const suggestions: string[] = []

  // Check for third-party attribution section
  if (!content.includes('THIRD-PARTY LICENSES')) {
    missingElements.push('Third-party licenses section')
    suggestions.push('Add section listing all third-party licenses')
  }

  // Check for n8n attribution
  if (!content.includes('n8n GmbH')) {
    missingElements.push('n8n copyright notice')
    suggestions.push('Add n8n GmbH copyright notice')
  }

  // Check for Apache license mention
  if (!content.includes('Apache License 2.0')) {
    missingElements.push('Apache License 2.0 reference')
    suggestions.push('Add Apache License 2.0 for n8n components')
  }

  return {
    file: fileName,
    hasAttribution: missingElements.length === 0,
    missingElements,
    suggestions
  }
}

function checkPackageJsonAttribution(content: string, fileName: string): AttributionCheck {
  const missingElements: string[] = []
  const suggestions: string[] = []

  try {
    const packageJson = JSON.parse(content)

    // Check for license field
    if (!packageJson.license) {
      missingElements.push('License field')
      suggestions.push('Add "license": "MIT" field')
    }

    // Check for repository field
    if (!packageJson.repository) {
      missingElements.push('Repository field')
      suggestions.push('Add repository information')
    }

    // Check for author field
    if (!packageJson.author) {
      missingElements.push('Author field')
      suggestions.push('Add author information')
    }

  } catch (error) {
    missingElements.push('Invalid JSON')
    suggestions.push('Fix JSON syntax errors')
  }

  return {
    file: fileName,
    hasAttribution: missingElements.length === 0,
    missingElements,
    suggestions
  }
}

function checkMarkdownAttribution(content: string, fileName: string): AttributionCheck {
  const missingElements: string[] = []
  const suggestions: string[] = []

  // Check for basic attribution elements
  if (!content.toLowerCase().includes('n8n') && fileName.includes('license')) {
    missingElements.push('n8n reference')
    suggestions.push('Add n8n attribution information')
  }

  return {
    file: fileName,
    hasAttribution: missingElements.length === 0,
    missingElements,
    suggestions
  }
}

function checkCodeAttribution(content: string, fileName: string): AttributionCheck {
  const missingElements: string[] = []
  const suggestions: string[] = []

  // Check if this is generated code or code that uses n8n
  const usesN8n = content.includes('n8n-core') || 
                  content.includes('n8n-workflow') || 
                  content.includes('n8n-nodes-base')

  if (usesN8n) {
    // Check for license header
    if (!content.includes('Generated by n8n Workflow Converter') && 
        !content.includes('@license')) {
      missingElements.push('License header')
      suggestions.push('Add license header with n8n attribution')
    }
  }

  return {
    file: fileName,
    hasAttribution: missingElements.length === 0,
    missingElements,
    suggestions
  }
}

function checkDirectoryAttribution(dirPath: string): AttributionCheck[] {
  const results: AttributionCheck[] = []

  try {
    const files = readdirSync(dirPath)
    
    for (const file of files) {
      const filePath = join(dirPath, file)
      const stat = statSync(filePath)
      
      if (stat.isFile() && (file.endsWith('.ts') || file.endsWith('.js'))) {
        const result = checkFileAttribution(filePath, `${dirPath}/${file}`)
        results.push(result)
      } else if (stat.isDirectory()) {
        // Recursively check subdirectories
        const subResults = checkDirectoryAttribution(filePath)
        results.push(...subResults)
      }
    }
  } catch (error) {
    // Directory doesn't exist or can't be read
  }

  return results
}

function generateAttributionReport(results: AttributionCheck[]) {
  console.log('\n📋 Attribution Compliance Report\n')

  const compliantFiles = results.filter(r => r.hasAttribution)
  const nonCompliantFiles = results.filter(r => !r.hasAttribution)

  console.log(`✅ Compliant files: ${compliantFiles.length}`)
  console.log(`❌ Non-compliant files: ${nonCompliantFiles.length}`)
  console.log(`📊 Total files checked: ${results.length}`)

  if (nonCompliantFiles.length > 0) {
    console.log('\n❌ Files requiring attention:\n')
    
    nonCompliantFiles.forEach(result => {
      console.log(`📄 ${result.file}`)
      console.log(`   Missing: ${result.missingElements.join(', ')}`)
      if (result.suggestions.length > 0) {
        console.log(`   Suggestions:`)
        result.suggestions.forEach(suggestion => {
          console.log(`   - ${suggestion}`)
        })
      }
      console.log()
    })

    console.log('🔧 Recommended actions:')
    console.log('1. Add missing attribution elements to non-compliant files')
    console.log('2. Use the provided templates for generated code')
    console.log('3. Run this check again after making changes')
    console.log('4. Consider automating attribution in your build process')

    process.exit(1)
  } else {
    console.log('\n🎉 All files are compliant with attribution requirements!')
    console.log('\n📝 Attribution templates available:')
    console.log('- Generated code header: Use in all generated files')
    console.log('- README attribution: Include in all generated project READMEs')
    console.log('- License notices: Ensure all third-party licenses are documented')
  }
}

// Run the script
if (require.main === module) {
  checkAttribution()
}

export { checkAttribution, GENERATED_CODE_HEADER, README_ATTRIBUTION }