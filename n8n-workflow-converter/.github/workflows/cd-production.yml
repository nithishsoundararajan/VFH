name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - hotfix
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Production readiness check
  production-readiness:
    name: Production Readiness Check
    runs-on: ubuntu-latest
    
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      deployment_type: ${{ steps.check.outputs.deployment_type }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check production readiness
        id: check
        run: |
          # Check if this is an emergency deployment
          if [ "${{ github.event.inputs.skip_tests }}" = "true" ]; then
            echo "deployment_type=emergency" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "üö® Emergency deployment - skipping some checks"
            exit 0
          fi
          
          # Check if deploying from main branch or tag
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "deployment_type=normal" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Production deployment approved"
          else
            echo "deployment_type=none" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Production deployment only allowed from main branch or tags"
          fi

  # Full test suite (skipped in emergency)
  full-test-suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: production-readiness
    if: needs.production-readiness.outputs.should_deploy == 'true' && needs.production-readiness.outputs.deployment_type != 'emergency'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run full test suite
        run: |
          echo "üß™ Running comprehensive test suite..."
          npm run test:coverage
          npm run test:e2e
          npm run lint
          npm run type-check
          echo "‚úÖ All tests passed"

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: production-readiness
    if: needs.production-readiness.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Security audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level=high
          
      - name: License compliance check
        run: |
          npm ci
          npm run license-validate
          npm run attribution-check

  # Build production image
  build-production:
    name: Build Production Image
    runs-on: ubuntu-latest
    needs: [production-readiness, full-test-suite, security-audit]
    if: needs.production-readiness.outputs.should_deploy == 'true' && (success() || needs.production-readiness.outputs.deployment_type == 'emergency')
    
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=production-latest
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: Build and push production image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_STANDALONE=true
            NODE_ENV=production
          platforms: linux/amd64,linux/arm64

  # Production database migration
  production-migration:
    name: Production Database Migration
    needs: [production-readiness, build-production]
    if: needs.production-readiness.outputs.should_deploy == 'true'
    uses: ./.github/workflows/database-migration.yml
    with:
      environment: production
      migration_action: apply
    secrets:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ secrets.PRODUCTION_SUPABASE_PROJECT_ID }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  # Blue-Green deployment preparation
  prepare-deployment:
    name: Prepare Blue-Green Deployment
    runs-on: ubuntu-latest
    needs: [production-readiness, build-production, production-migration]
    if: needs.production-readiness.outputs.should_deploy == 'true'
    
    outputs:
      deployment_slot: ${{ steps.slot.outputs.slot }}
      
    steps:
      - name: Determine deployment slot
        id: slot
        run: |
          # In a real scenario, this would check current active slot
          # For now, we'll use a simple timestamp-based approach
          SLOT="blue"
          if [ $(($(date +%s) % 2)) -eq 0 ]; then
            SLOT="green"
          fi
          
          echo "slot=$SLOT" >> $GITHUB_OUTPUT
          echo "üéØ Deploying to $SLOT slot"

  # Deploy to Vercel Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [production-readiness, build-production, production-migration, prepare-deployment]
    if: needs.production-readiness.outputs.should_deploy == 'true'
    
    environment:
      name: production
      url: https://n8n-converter.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PRODUCTION_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}
          vercel-args: '--prod'
          alias-domains: |
            n8n-converter.com
            www.n8n-converter.com

  # Production smoke tests
  production-smoke-tests:
    name: Production Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for production deployment to be ready..."
          sleep 60
          
      - name: Run production smoke tests
        env:
          PRODUCTION_URL: https://n8n-converter.com
        run: |
          echo "üß™ Running production smoke tests..."
          
          # Health check
          curl -f $PRODUCTION_URL/api/health || exit 1
          
          # Basic functionality
          curl -f $PRODUCTION_URL/ || exit 1
          
          # API endpoints
          curl -f $PRODUCTION_URL/api/health/database || exit 1
          curl -f $PRODUCTION_URL/api/health/storage || exit 1
          
          echo "‚úÖ Production smoke tests passed"
          
      - name: Run critical path tests
        env:
          PRODUCTION_URL: https://n8n-converter.com
        run: |
          npx playwright install --with-deps
          npm run test:e2e -- --grep="critical"

  # Performance monitoring
  production-monitoring:
    name: Production Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production, production-smoke-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://n8n-converter.com
            https://n8n-converter.com/app
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: Setup monitoring alerts
        run: |
          echo "üìä Setting up production monitoring..."
          # This would configure monitoring alerts
          echo "‚úÖ Monitoring alerts configured"

  # Rollback preparation
  prepare-rollback:
    name: Prepare Rollback Plan
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    
    steps:
      - name: Prepare rollback
        run: |
          echo "üîÑ Preparing rollback plan..."
          echo "Previous deployment can be restored via Vercel dashboard"
          echo "Database backup available for restoration if needed"
          
      - name: Notify on-call team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_ALERTS }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_ALERTS }}

  # Post-deployment verification
  post-deployment-verification:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-production, production-smoke-tests, production-monitoring]
    
    steps:
      - name: Verify deployment health
        run: |
          echo "üîç Verifying deployment health..."
          
          # Check all health endpoints
          curl -f https://n8n-converter.com/api/health
          curl -f https://n8n-converter.com/api/health/database
          curl -f https://n8n-converter.com/api/health/storage
          curl -f https://n8n-converter.com/api/health/external-services
          
          echo "‚úÖ All health checks passed"
          
      - name: Update deployment status
        run: |
          echo "üìù Updating deployment status..."
          # This would update deployment tracking systems
          echo "‚úÖ Deployment status updated"

  # Notification and cleanup
  notify-success:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-production, production-smoke-tests, production-monitoring, post-deployment-verification]
    if: success()
    
    steps:
      - name: Notify success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Create deployment summary
        run: |
          echo "## üéâ Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Branch/Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://n8n-converter.com" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **All checks passed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor application performance" >> $GITHUB_STEP_SUMMARY
          echo "- Watch for any user-reported issues" >> $GITHUB_STEP_SUMMARY
          echo "- Review deployment metrics in 24 hours" >> $GITHUB_STEP_SUMMARY
          
      - name: Clean up old deployments
        run: |
          echo "üßπ Cleaning up old deployment artifacts..."
          # This would clean up old Docker images, etc.
          echo "‚úÖ Cleanup completed"