name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: |
          echo "🔍 Running npm audit..."
          npm audit --audit-level=moderate --json > audit-results.json || true
          
      - name: Process audit results
        run: |
          if [ -f audit-results.json ]; then
            VULNERABILITIES=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0')
            HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
            CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
            
            echo "Total vulnerabilities: $VULNERABILITIES"
            echo "High severity: $HIGH_VULNS"
            echo "Critical severity: $CRITICAL_VULNS"
            
            if [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "❌ Critical vulnerabilities found!"
              exit 1
            elif [ "$HIGH_VULNS" -gt 0 ]; then
              echo "⚠️ High severity vulnerabilities found!"
              # Don't fail for high severity in non-main branches
              if [ "${{ github.ref }}" = "refs/heads/main" ]; then
                exit 1
              fi
            fi
          fi
          
      - name: Upload audit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: npm-audit-results
          path: audit-results.json

  # Snyk security scanning
  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json
        continue-on-error: true
        
      - name: Upload Snyk results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: snyk-results
          path: snyk-results.json

  # CodeQL analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://example.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: example-key
        run: npm run build
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: |
          docker build -t n8n-converter:security-scan .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'n8n-converter:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # License compliance check
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check license compliance
        run: |
          echo "🔍 Checking license compliance..."
          npm run license-validate
          
      - name: Generate license report
        run: |
          npm run generate-licenses
          
      - name: Check for GPL/AGPL licenses
        run: |
          if npm run license-check | grep -E "(GPL|AGPL)"; then
            echo "❌ GPL/AGPL licenses detected!"
            exit 1
          else
            echo "✅ No GPL/AGPL licenses found"
          fi

  # OWASP ZAP security scan (for deployed app)
  zap-scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://staging-n8n-converter.vercel.app'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j'
          
      - name: Create ZAP rules file
        run: |
          mkdir -p .zap
          cat > .zap/rules.tsv << EOF
          10021	IGNORE	(X-Content-Type-Options Header Missing)
          10020	IGNORE	(X-Frame-Options Header Not Set)
          EOF

  # Security policy validation
  security-policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check security policy files
        run: |
          echo "🔍 Checking security policy files..."
          
          # Check if SECURITY.md exists
          if [ ! -f SECURITY.md ]; then
            echo "❌ SECURITY.md file missing"
            exit 1
          fi
          
          # Check if security headers are configured
          if ! grep -q "X-Frame-Options" next.config.ts; then
            echo "❌ Security headers not configured in next.config.ts"
            exit 1
          fi
          
          echo "✅ Security policy files validated"

  # Environment security check
  env-security-check:
    name: Environment Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check environment configuration
        run: |
          echo "🔍 Checking environment security..."
          
          # Check for hardcoded secrets
          if grep -r "sk-" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" src/; then
            echo "❌ Potential hardcoded API keys found!"
            exit 1
          fi
          
          # Check for TODO security items
          if grep -r "TODO.*security\|FIXME.*security" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" src/; then
            echo "⚠️ Security TODOs found - please review"
          fi
          
          echo "✅ Environment security check passed"

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, snyk-scan, codeql-analysis, secret-scan, container-scan, license-compliance]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date:** $(date -u)" >> security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          
          # Check job results
          if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
            echo "✅ **Dependency Scan:** Passed" >> security-report.md
          else
            echo "❌ **Dependency Scan:** Failed" >> security-report.md
          fi
          
          if [ "${{ needs.snyk-scan.result }}" = "success" ]; then
            echo "✅ **Snyk Scan:** Passed" >> security-report.md
          else
            echo "❌ **Snyk Scan:** Failed" >> security-report.md
          fi
          
          if [ "${{ needs.codeql-analysis.result }}" = "success" ]; then
            echo "✅ **CodeQL Analysis:** Passed" >> security-report.md
          else
            echo "❌ **CodeQL Analysis:** Failed" >> security-report.md
          fi
          
          if [ "${{ needs.secret-scan.result }}" = "success" ]; then
            echo "✅ **Secret Scan:** Passed" >> security-report.md
          else
            echo "❌ **Secret Scan:** Failed" >> security-report.md
          fi
          
          if [ "${{ needs.container-scan.result }}" = "success" ]; then
            echo "✅ **Container Scan:** Passed" >> security-report.md
          else
            echo "❌ **Container Scan:** Failed" >> security-report.md
          fi
          
          if [ "${{ needs.license-compliance.result }}" = "success" ]; then
            echo "✅ **License Compliance:** Passed" >> security-report.md
          else
            echo "❌ **License Compliance:** Failed" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "- Review any failed scans and address identified issues" >> security-report.md
          echo "- Keep dependencies updated to latest secure versions" >> security-report.md
          echo "- Monitor security advisories for used packages" >> security-report.md
          echo "- Regularly review and update security policies" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Notify security team on failures
  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [dependency-scan, snyk-scan, codeql-analysis, secret-scan, container-scan]
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    
    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECURITY_WEBHOOK }}