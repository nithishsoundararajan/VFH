/**
 * Attribution templates for generated code and documentation
 */

export const GENERATED_CODE_HEADER = `/**
 * Generated by n8n Workflow Converter
 * 
 * This code uses n8n packages under the Apache License 2.0
 * Original n8n project: https://github.com/n8n-io/n8n
 * 
 * @license Apache-2.0 (for n8n components)
 * @license MIT (for generated code structure)
 */`

export const PACKAGE_JSON_TEMPLATE = {
  name: 'n8n-converted-workflow',
  version: '1.0.0',
  description: 'Standalone Node.js project generated from n8n workflow',
  main: 'main.js',
  scripts: {
    start: 'node main.js',
    dev: 'node --watch main.js',
    test: 'npm run test:unit',
    'test:unit': 'jest',
    'test:watch': 'jest --watch'
  },
  keywords: ['n8n', 'workflow', 'automation', 'standalone'],
  author: 'Generated by n8n Workflow Converter',
  license: 'MIT',
  repository: {
    type: 'git',
    url: 'https://github.com/your-username/your-repo.git'
  },
  dependencies: {
    'n8n-core': '^1.0.0',
    'n8n-workflow': '^1.0.0',
    dotenv: '^16.0.0'
  },
  devDependencies: {
    jest: '^29.0.0',
    '@types/node': '^20.0.0'
  },
  engines: {
    node: '>=20.0.0'
  }
}

export const README_TEMPLATE = `# {{WORKFLOW_NAME}}

A standalone Node.js project generated from an n8n workflow.

## Overview

This project was automatically generated using the **n8n Workflow Converter**, which transforms n8n workflows into standalone, executable Node.js applications.

### Original Workflow
- **Name**: {{WORKFLOW_NAME}}
- **Nodes**: {{NODE_COUNT}}
- **Triggers**: {{TRIGGER_COUNT}}
- **Generated**: {{GENERATION_DATE}}

## Quick Start

### Prerequisites
- Node.js 20 or higher
- npm or yarn

### Installation

1. Install dependencies:
\`\`\`bash
npm install
\`\`\`

2. Configure environment variables:
\`\`\`bash
cp .env.example .env
\`\`\`

3. Edit \`.env\` with your configuration:
\`\`\`bash
# Add your API keys and configuration here
# See .env.example for all available options
\`\`\`

4. Run the workflow:
\`\`\`bash
npm start
\`\`\`

## Project Structure

\`\`\`
├── src/
│   ├── nodes/          # Individual node implementations
│   ├── triggers/       # Trigger implementations
│   └── workflows/      # Workflow execution logic
├── config.js           # Configuration management
├── main.js            # Application entry point
├── package.json       # Dependencies and scripts
├── .env.example       # Environment variable template
└── README.md          # This file
\`\`\`

## Configuration

### Environment Variables

Copy \`.env.example\` to \`.env\` and configure the following variables:

{{ENV_VARIABLES}}

### Node Configuration

Each node in your workflow may require specific configuration. Check the individual node files in \`src/nodes/\` for detailed configuration options.

## Usage

### Running the Workflow

\`\`\`bash
# Run once
npm start

# Run in development mode (with file watching)
npm run dev

# Run tests
npm test
\`\`\`

### Triggers

{{TRIGGER_DOCUMENTATION}}

### Error Handling

The workflow includes comprehensive error handling:
- Individual node failures are logged and can be configured to continue or stop execution
- Network timeouts and retries are handled automatically
- All errors are logged with detailed context

## Development

### Adding Custom Nodes

To add custom functionality:

1. Create a new file in \`src/nodes/\`
2. Implement the node interface
3. Register the node in \`src/nodes/index.js\`
4. Update the workflow configuration

### Testing

\`\`\`bash
# Run all tests
npm test

# Run tests in watch mode
npm run test:watch

# Run specific test file
npm test -- --testNamePattern="NodeName"
\`\`\`

## Attribution

This project was generated using the **n8n Workflow Converter**, which leverages official n8n packages for workflow execution.

### n8n Attribution
- **n8n**: Workflow automation platform
- **License**: Apache License 2.0
- **Copyright**: n8n GmbH
- **Website**: https://n8n.io/
- **Repository**: https://github.com/n8n-io/n8n

The following n8n packages are used in this project:
{{N8N_PACKAGES}}

### License Compliance
This generated project complies with all applicable open source licenses:
- **Generated Code**: MIT License
- **n8n Components**: Apache License 2.0
- **Third-party Dependencies**: Various (see package.json)

For complete license information, see the individual package documentation and the \`node_modules\` directory after installation.

### Converter Attribution
- **n8n Workflow Converter**: https://github.com/your-org/n8n-workflow-converter
- **License**: MIT License
- **Generated**: {{GENERATION_DATE}}

## Support

### Generated Project Support
- Check the [n8n documentation](https://docs.n8n.io/) for workflow and node information
- Review the generated code comments for implementation details
- Test individual nodes in isolation for debugging

### Converter Support
- **Documentation**: https://github.com/your-org/n8n-workflow-converter/docs
- **Issues**: https://github.com/your-org/n8n-workflow-converter/issues
- **Discussions**: https://github.com/your-org/n8n-workflow-converter/discussions

## Disclaimer

This project is not officially affiliated with n8n GmbH. The n8n name and logo are trademarks of n8n GmbH. This is an independent tool that uses publicly available n8n packages under their respective open source licenses.

## License

This generated project is licensed under the MIT License - see the LICENSE file for details.

The n8n components used in this project are licensed under the Apache License 2.0. See the individual package licenses for complete terms.

---

**Special thanks to the n8n team for creating an excellent automation platform and making their packages available under open source licenses.**`

export const LICENSE_TEMPLATE = `MIT License

Copyright (c) {{YEAR}} {{PROJECT_NAME}}

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================================================================================

THIRD-PARTY COMPONENTS

This project uses the following third-party components:

n8n Components (Apache License 2.0)
Copyright (c) n8n GmbH
- n8n-core: Core n8n functionality
- n8n-workflow: Workflow execution logic
- n8n-nodes-base: Standard node implementations (if applicable)

The Apache License 2.0 can be found at:
https://www.apache.org/licenses/LICENSE-2.0

Other Dependencies
See package.json for a complete list of dependencies and their licenses.

================================================================================

ATTRIBUTION

This project was generated using the n8n Workflow Converter.
Original n8n project: https://github.com/n8n-io/n8n
Converter project: https://github.com/your-org/n8n-workflow-converter

Special thanks to the n8n team for their excellent automation platform.`

export const ENV_EXAMPLE_TEMPLATE = `# n8n Converted Workflow Configuration
# Copy this file to .env and configure your values

# Application Settings
NODE_ENV=production
LOG_LEVEL=info

# Database Configuration (if needed)
# DATABASE_URL=postgresql://user:password@localhost:5432/database

# API Keys and Credentials
# Add your API keys and credentials here
# Example:
# OPENAI_API_KEY=your-openai-key
# SLACK_BOT_TOKEN=xoxb-your-slack-token
# GITHUB_TOKEN=ghp_your-github-token

# Email Configuration (if needed)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your-email@gmail.com
# SMTP_PASS=your-app-password

# Webhook Configuration (if applicable)
# WEBHOOK_PORT=3000
# WEBHOOK_PATH=/webhook

# Cron Configuration (if applicable)
# TIMEZONE=UTC

{{CUSTOM_ENV_VARIABLES}}`

export const MAIN_JS_TEMPLATE = `${GENERATED_CODE_HEADER}

const { WorkflowExecutor } = require('./src/workflows/{{WORKFLOW_FILENAME}}');
const config = require('./config');

async function main() {
  try {
    console.log('Starting {{WORKFLOW_NAME}} execution...');
    
    const executor = new WorkflowExecutor(config);
    const result = await executor.execute();
    
    console.log('Workflow execution completed successfully');
    console.log('Result:', JSON.stringify(result, null, 2));
    
  } catch (error) {
    console.error('Workflow execution failed:', error);
    process.exit(1);
  }
}

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('Received SIGINT, shutting down gracefully...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('Received SIGTERM, shutting down gracefully...');
  process.exit(0);
});

// Start the application
if (require.main === module) {
  main();
}

module.exports = { main };`

export const CONFIG_JS_TEMPLATE = `${GENERATED_CODE_HEADER}

require('dotenv').config();

const config = {
  // Application settings
  nodeEnv: process.env.NODE_ENV || 'development',
  logLevel: process.env.LOG_LEVEL || 'info',
  
  // Workflow settings
  workflowName: '{{WORKFLOW_NAME}}',
  
  // Database configuration (if needed)
  database: {
    url: process.env.DATABASE_URL
  },
  
  // API credentials
  credentials: {
    {{CREDENTIALS_CONFIG}}
  },
  
  // Email configuration (if needed)
  email: {
    host: process.env.SMTP_HOST,
    port: parseInt(process.env.SMTP_PORT) || 587,
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS
  },
  
  // Webhook configuration (if applicable)
  webhook: {
    port: parseInt(process.env.WEBHOOK_PORT) || 3000,
    path: process.env.WEBHOOK_PATH || '/webhook'
  },
  
  // Cron configuration (if applicable)
  cron: {
    timezone: process.env.TIMEZONE || 'UTC'
  }
};

// Validate required configuration
function validateConfig() {
  const required = [
    {{REQUIRED_CONFIG}}
  ];
  
  const missing = required.filter(key => {
    const value = key.split('.').reduce((obj, k) => obj && obj[k], config);
    return !value;
  });
  
  if (missing.length > 0) {
    console.error('Missing required configuration:', missing);
    console.error('Please check your .env file and ensure all required variables are set.');
    process.exit(1);
  }
}

// Validate configuration on load
validateConfig();

module.exports = config;`

/**
 * Generate attribution content for a specific workflow
 */
export function generateAttributionContent(workflowData: {
  name: string
  nodeCount: number
  triggerCount: number
  nodes: string[]
  envVariables?: string[]
  triggers?: string[]
}) {
  const currentYear = new Date().getFullYear()
  const generationDate = new Date().toISOString().split('T')[0]
  
  // Generate n8n packages list
  const n8nPackages = [
    '- `n8n-core`: Core workflow execution functionality',
    '- `n8n-workflow`: Workflow parsing and execution logic'
  ]
  
  if (workflowData.nodes.some(node => node.includes('nodes-base'))) {
    n8nPackages.push('- `n8n-nodes-base`: Standard node implementations')
  }
  
  // Generate environment variables documentation
  const envVarsDoc = workflowData.envVariables?.length 
    ? workflowData.envVariables.map(env => `- \`${env}\`: Description of ${env}`).join('\n')
    : '- No additional environment variables required'
  
  // Generate trigger documentation
  const triggerDoc = workflowData.triggers?.length
    ? workflowData.triggers.map(trigger => `### ${trigger}\n\nDescription of ${trigger} trigger configuration.`).join('\n\n')
    : 'This workflow does not use triggers and runs on-demand.'
  
  return {
    WORKFLOW_NAME: workflowData.name,
    NODE_COUNT: workflowData.nodeCount.toString(),
    TRIGGER_COUNT: workflowData.triggerCount.toString(),
    GENERATION_DATE: generationDate,
    YEAR: currentYear.toString(),
    PROJECT_NAME: workflowData.name,
    N8N_PACKAGES: n8nPackages.join('\n'),
    ENV_VARIABLES: envVarsDoc,
    TRIGGER_DOCUMENTATION: triggerDoc,
    WORKFLOW_FILENAME: workflowData.name.toLowerCase().replace(/[^a-z0-9]/g, '-')
  }
}

/**
 * Apply attribution templates to generated files
 */
export function applyAttributionTemplates(
  templates: { [filename: string]: string },
  attributionData: ReturnType<typeof generateAttributionContent>
) {
  const result: { [filename: string]: string } = {}
  
  Object.entries(templates).forEach(([filename, template]) => {
    result[filename] = Object.entries(attributionData).reduce(
      (content, [key, value]) => content.replace(new RegExp(`{{${key}}}`, 'g'), value),
      template
    )
  })
  
  return result
}